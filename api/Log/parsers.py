# Parsing the arguments for the incoming post request.

from flask_restplus import reqparse, inputs
import datetime


parser = reqparse.RequestParser(bundle_errors=True)
parser.add_argument('application_id', type=int, required=True, location='form', help='No application id given.')
parser.add_argument('application_name', type=str, required=True, location='form', help='No application name passed.')
parser.add_argument('application_id', type=int, required=True, location='form', help='No application id given.')
parser.add_argument('application_log', type=dict, required=True, location='form', help='No log provided.')
# timestamp will be generated by the api itself.
parser_args = parser.parse_args()

log_parser = reqparse.RequestParser()
log_parser.add_argument('timestamp', required=True, type=lambda x: datetime.strptime(x,'%Y-%m-%dT%H:%M:%S'), location = parser_args, help= 'No timestamp provided for the log.')
log_parser.add_argument('logging_mode', type=str, location = parser_args)
log_parser.add_argument('host_ip', type=inputs.ip, location = parser_args)
log_parser.add_argument('access_request', type=str, location = parser_args)
log_parser.add_argument('result_status_code', type=int, location = parser_args)
log_parser.add_argument('user_agent', type=str, location = parser_args)
log_parser.add_argument('user_name', type=str, location = parser_args)
log_parser.add_argument('bytes_transferred', type=int, location = parser_args)
log_parser.add_argument('log_message', type=str, required=True, location = parser_args)









